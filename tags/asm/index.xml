<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>asm on 127.0.0.1</title><link>http://127001.me/tags/asm/</link><description>Recent content in asm on 127.0.0.1</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 09 May 2016 00:59:08 +0200</lastBuildDate><atom:link href="http://127001.me/tags/asm/index.xml" rel="self" type="application/rss+xml"/><item><title>Overloading that is not permitted or Java bridge methods</title><link>http://127001.me/post/java-bridge-methods/</link><pubDate>Mon, 09 May 2016 00:59:08 +0200</pubDate><guid>http://127001.me/post/java-bridge-methods/</guid><description>&lt;div class="paragraph">
&lt;p>Most of my technical interviews for Java developer position include a puzzle, where candidate should implement 2 very
similar interfaces in a single class:&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="highlightjs highlight">&lt;code data-lang="java" class="language-java hljs">// Implement both interfaces in a single class if possible
// Explain why possible or not possible
interface WithPrimitiveInt {
void m(int i);
}
interface WithInteger {
void m(Integer i);
}&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Sometimes candidates, not being sure about the right answer, are willing to solve the following puzzle instead (I give
it to candidates later anyway):&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="highlightjs highlight">&lt;code data-lang="java" class="language-java hljs">interface S {
String m(int i);
}
interface V {
void m(int i);
}&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div></description></item></channel></rss>