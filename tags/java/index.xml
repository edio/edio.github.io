<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on 127.0.0.1</title><link>https://127001.me/tags/java/</link><description>Recent content in java on 127.0.0.1</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Dmytro Kostiuchenko</copyright><lastBuildDate>Mon, 10 Feb 2020 22:59:08 -0500</lastBuildDate><atom:link href="https://127001.me/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>You may be doing FP already</title><link>https://127001.me/post/you-may-be-doing-fp-already/</link><pubDate>Mon, 10 Feb 2020 22:59:08 -0500</pubDate><guid>https://127001.me/post/you-may-be-doing-fp-already/</guid><description>&lt;div class="paragraph">
&lt;p>Functional programming (FP) has been a somewhat hot topic in recent years in my surroundings. Although in my &lt;em>close&lt;/em>
surroundings people are usually not very zealous or overly excited, I do notice sometimes talks, discussions and vocally
expressed opinions where &lt;em>tremendous&lt;/em> benefits of FP over other paradigms are claimed, through presenting FP as a
fundamentally new approach to writing code, opposite to, say, OOP. Some go as far as saying, that one must fully ditch
OOP and all related experience because it&amp;#8217;s all just a mistake.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Such extreme claims are rarely challenged. When a person with an OOP background gets involved in any FP-related
discussion, it quickly gets overwhelmed with new unfamiliar vocabulary: algebras, monads, semigroups, functors, type
classes&amp;#8230;&amp;#8203; And I start questioning intents of those claims â€” are they made to make people shift to FP, or to prove, that
some definition of FP is better than some definition of OOP?&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>With this post, I hope to show that FP can be seen as an evolutionary step, a generalization over practices we already
consider the best in OOP paradigm. And if viewed like this, it can be useful even when adopted gradually. I hope this
point of view will persuade programmers to look into FP and to borrow new techniques from it to improve non-FP code.&lt;/p>
&lt;/div></description></item><item><title>Overloading that is not permitted or Java bridge methods</title><link>https://127001.me/post/java-bridge-methods/</link><pubDate>Mon, 09 May 2016 00:59:08 +0200</pubDate><guid>https://127001.me/post/java-bridge-methods/</guid><description>&lt;div class="paragraph">
&lt;p>Most of my technical interviews for Java developer position include a puzzle, where candidate should implement 2 very
similar interfaces in a single class:&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="highlightjs highlight">&lt;code data-lang="java" class="language-java hljs">// Implement both interfaces in a single class if possible
// Explain why possible or not possible
interface WithPrimitiveInt {
void m(int i);
}
interface WithInteger {
void m(Integer i);
}&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Sometimes candidates, not being sure about the right answer, are willing to solve the following puzzle instead (I give
it to candidates later anyway):&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="content">
&lt;pre class="highlightjs highlight">&lt;code data-lang="java" class="language-java hljs">interface S {
String m(int i);
}
interface V {
void m(int i);
}&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div></description></item><item><title>How Java logging frameworks determine caller class and method name</title><link>https://127001.me/post/java-logging-caller-class-and-method/</link><pubDate>Tue, 08 Apr 2014 23:54:49 +0200</pubDate><guid>https://127001.me/post/java-logging-caller-class-and-method/</guid><description>&lt;div class="paragraph">
&lt;p>This post describes how java logging frameworks (&lt;em>log4j&lt;/em>, for example) know a point (concrete class and method name), where logging statement has been invoked.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>I decided to write this post, because quite often I communicate with developers, who do not understant what is the cost of writing caller information to logs, and why such high cost is imposed.&lt;/p>
&lt;/div></description></item></channel></rss>