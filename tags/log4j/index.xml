<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>log4j on 127.0.0.1</title>
    <link>http://127001.me/tags/log4j/</link>
    <description>Recent content in log4j on 127.0.0.1</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Apr 2014 23:54:49 +0200</lastBuildDate>
    
	<atom:link href="http://127001.me/tags/log4j/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How Java logging frameworks determine caller class and method name</title>
      <link>http://127001.me/post/java-logging-caller-class-and-method/</link>
      <pubDate>Tue, 08 Apr 2014 23:54:49 +0200</pubDate>
      
      <guid>http://127001.me/post/java-logging-caller-class-and-method/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This post describes how java logging frameworks (&lt;em&gt;log4j&lt;/em&gt;, for example) know a point (concrete class and method name), where logging statement has been invoked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I decided to write this post, because quite often I communicate with developers, who do not understant what is the cost of writing caller information to logs, and why such high cost is imposed.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>